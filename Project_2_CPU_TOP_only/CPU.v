// File: CPU.v
// Generated by MyHDL 0.11
// Date: Mon Jul 12 20:47:44 2021


`timescale 1ns/10ps

module CPU (
    data,
    data_in,
    write_enable,
    clock,
    reset
);


output signed [31:0] data;
reg signed [31:0] data;
input [31:0] data_in;
input write_enable;
input clock;
output reset;
reg reset;

reg signed [31:0] dataMem;
reg signed [31:0] ALUinput1;
reg signed [31:0] ALUinput2;
reg signed [31:0] ALU_result;
reg signed [31:0] rs1_Out;
reg signed [31:0] rs2_Out;
reg signed [31:0] jumpInstruction;
reg signed [31:0] imm;
reg [31:0] instruction;
reg [31:0] nextInstruction;
reg [31:0] nextPCInput;
reg [31:0] currentAddress;
reg [4:0] rs1_In;
reg [4:0] rs2_In;
reg [4:0] rd;
reg [2:0] funct3;
reg [2:0] memRead;
reg [6:0] funct7;
reg [6:0] opCode;
reg [4:0] ALUOp;
reg memWrite;
reg memToReg;
reg immToALU;
reg regWrite;
reg reg1ToPC;
reg pcToALU;
reg Selector_Branch;
reg Zero_Flag;
reg [31:0] address;
reg branch;
reg enableReset;
reg [31:0] pcInput;
reg [31:0] resetPC;
reg [7:0] instMem0_memory [0:332-1];
reg signed [31:0] RegisterFile0_registers [0:32-1];
reg signed [8:0] DataMemory0_memory [0:10240-1];



always @(instruction) begin: CPU_DECODER320_DECODE32
    rs1_In <= instruction[20-1:15];
    rs2_In <= instruction[25-1:20];
    rd <= instruction[12-1:7];
    opCode <= instruction[7-1:0];
    funct3 <= instruction[15-1:12];
    funct7 <= instruction[32-1:25];
end


always @(instruction) begin: CPU_DECODER320_IMMEDIATE
    reg [32-1:0] opcode_in;
    reg [32-1:0] function3;
    opcode_in = instruction[7-1:0];
    if ((opcode_in == 51)) begin
        imm <= 0;
    end
    else if ((opcode_in == 47)) begin
        imm <= 0;
    end
    else if ((opcode_in == 3)) begin
        imm <= $signed(instruction[32-1:20]);
    end
    else if ((opcode_in == 19)) begin
        function3 = instruction[15-1:12];
        imm <= $signed(instruction[32-1:20]);
        if (((function3 == 1) || (function3 == 5))) begin
            imm <= $signed(instruction[25-1:20]);
        end
        else begin
            imm <= $signed(instruction[32-1:20]);
        end
    end
    else if ((opcode_in == 35)) begin
        imm <= $signed({instruction[32-1:25], instruction[12-1:7]});
    end
    else if ((opcode_in == 99)) begin
        imm <= $signed({instruction[32-1:31], instruction[8-1:7], instruction[31-1:25], instruction[12-1:8]});
    end
    else if (((opcode_in == 23) || (opcode_in == 55))) begin
        imm <= $signed(instruction[32-1:12]);
    end
    else if ((opcode_in == 111)) begin
        imm <= $signed({instruction[31], instruction[20-1:12], instruction[20], instruction[31-1:21]});
    end
    else if ((opcode_in == 103)) begin
        imm <= $signed(instruction[32-1:21]);
    end
    else begin
        imm <= 0;
    end
end


always @(address) begin: CPU_INSTMEM0_FETCH
    if (write_enable) begin
        instMem0_memory[(address + 3)] <= data_in[32-1:24];
        instMem0_memory[(address + 2)] <= data_in[24-1:16];
        instMem0_memory[(address + 1)] <= data_in[16-1:8];
        instMem0_memory[address] <= data_in[8-1:0];
        instruction <= 0;
    end
    else begin
        instruction[32-1:24] <= instMem0_memory[(address + 3)];
        instruction[24-1:16] <= instMem0_memory[(address + 2)];
        instruction[16-1:8] <= instMem0_memory[(address + 1)];
        instruction[8-1:0] <= instMem0_memory[address];
    end
end


always @(opCode) begin: CPU_CONTROL0_CONTROLLER
    case (opCode)
        'h33: begin
            branch <= 0;
            memWrite <= 0;
            memToReg <= 0;
            immToALU <= 0;
            regWrite <= 1;
            reg1ToPC <= 0;
            pcToALU <= 0;
        end
        'h13: begin
            branch <= 0;
            memWrite <= 0;
            memToReg <= 0;
            immToALU <= 1;
            regWrite <= 1;
            reg1ToPC <= 0;
            pcToALU <= 0;
        end
        'h3: begin
            branch <= 0;
            memWrite <= 0;
            memToReg <= 1;
            immToALU <= 1;
            regWrite <= 1;
            reg1ToPC <= 0;
            pcToALU <= 0;
        end
        'h23: begin
            branch <= 0;
            memWrite <= 1;
            memToReg <= 0;
            immToALU <= 1;
            regWrite <= 0;
            reg1ToPC <= 0;
            pcToALU <= 0;
        end
        'h63: begin
            branch <= 1;
            memWrite <= 0;
            memToReg <= 0;
            immToALU <= 0;
            regWrite <= 0;
            reg1ToPC <= 0;
            pcToALU <= 0;
        end
        'h6f: begin
            branch <= 1;
            memWrite <= 0;
            memToReg <= 0;
            immToALU <= 0;
            regWrite <= 1;
            reg1ToPC <= 0;
            pcToALU <= 1;
        end
        'h67: begin
            branch <= 1;
            memWrite <= 0;
            memToReg <= 0;
            immToALU <= 0;
            regWrite <= 1;
            reg1ToPC <= 1;
            pcToALU <= 1;
        end
        'h37: begin
            branch <= 0;
            memWrite <= 0;
            memToReg <= 0;
            immToALU <= 1;
            regWrite <= 1;
            reg1ToPC <= 0;
            pcToALU <= 0;
        end
        'h17: begin
            branch <= 0;
            memWrite <= 0;
            memToReg <= 0;
            immToALU <= 1;
            regWrite <= 1;
            reg1ToPC <= 0;
            pcToALU <= 1;
        end
        default: begin
            branch <= 0;
            memWrite <= 0;
            memToReg <= 0;
            immToALU <= 0;
            regWrite <= 0;
            reg1ToPC <= 0;
            pcToALU <= 0;
        end
    endcase
end


always @(opCode, funct7, funct3) begin: CPU_CONTROL0_ALUCONTROL
    if ((opCode == 51)) begin
        case (funct7)
            'h0: begin
                if ((funct3 == 0)) begin
                    ALUOp <= 1;
                end
                else if ((funct3 == 4)) begin
                    ALUOp <= 3;
                end
                else if ((funct3 == 6)) begin
                    ALUOp <= 4;
                end
                else if ((funct3 == 7)) begin
                    ALUOp <= 5;
                end
                else if ((funct3 == 1)) begin
                    ALUOp <= 6;
                end
                else if ((funct3 == 5)) begin
                    ALUOp <= 7;
                end
                else if (((funct3 == 2) || (funct3 == 3))) begin
                    ALUOp <= 9;
                end
                else begin
                    ALUOp <= 0;
                end
            end
            'h20: begin
                case (funct3)
                    'h0: begin
                        ALUOp <= 2;
                    end
                    'h5: begin
                        ALUOp <= 8;
                    end
                    default: begin
                        ALUOp <= 0;
                    end
                endcase
            end
            default: begin
                ALUOp <= 0;
            end
        endcase
    end
    else if ((opCode == 19)) begin
        if ((funct3 == 0)) begin
            ALUOp <= 1;
        end
        else if ((funct3 == 4)) begin
            ALUOp <= 3;
        end
        else if ((funct3 == 6)) begin
            ALUOp <= 4;
        end
        else if ((funct3 == 7)) begin
            ALUOp <= 5;
        end
        else if ((funct3 == 1)) begin
            ALUOp <= 6;
        end
        else if ((funct3 == 5)) begin
            ALUOp <= 7;
        end
        else if (((funct3 == 2) || (funct3 == 3))) begin
            ALUOp <= 9;
        end
        else begin
            ALUOp <= 0;
        end
    end
    else if (((opCode == 3) || (opCode == 35))) begin
        ALUOp <= 1;
    end
    else if ((opCode == 99)) begin
        if ((funct3 == 0)) begin
            ALUOp <= 10;
        end
        else if ((funct3 == 1)) begin
            ALUOp <= 11;
        end
        else if (((funct3 == 4) || (funct3 == 6))) begin
            ALUOp <= 12;
        end
        else if (((funct3 == 5) || (funct3 == 7))) begin
            ALUOp <= 13;
        end
        else begin
            ALUOp <= 0;
        end
    end
    else if (((opCode == 111) || (opCode == 103))) begin
        ALUOp <= 14;
    end
    else if ((opCode == 55)) begin
        ALUOp <= 15;
    end
    else if ((opCode == 23)) begin
        ALUOp <= 16;
    end
    else begin
        ALUOp <= 0;
    end
end


always @(opCode, funct3) begin: CPU_CONTROL0_DATAMEMCONTROLER
    if (((opCode == 3) || (opCode == 35))) begin
        if (((funct3 == 0) || (funct3 == 4))) begin
            memRead <= 0;
        end
        else if (((funct3 == 1) || (funct3 == 5))) begin
            memRead <= 1;
        end
        else if ((funct3 == 2)) begin
            memRead <= 2;
        end
        else begin
            memRead <= 0;
        end
    end
    else begin
        memRead <= 0;
    end
end


always @(address) begin: CPU_ADDER0_ADD
    reg [32-1:0] increament;
    increament = 32'h4;
    nextInstruction <= (address + increament);
end


always @(rs1_In, rs2_In) begin: CPU_REGISTERFILE0_REGISTERSFETCH
    rs1_Out <= RegisterFile0_registers[rs1_In];
    rs2_Out <= RegisterFile0_registers[rs2_In];
end


always @(data, rd) begin: CPU_REGISTERFILE0_REGISTERSWRITE
    if (regWrite) begin
        RegisterFile0_registers[rd] <= data;
    end
end


always @(ALUinput1, ALUinput2, ALUOp) begin: CPU_ALU0_OPERAND
    case (ALUOp)
        'h1: begin
            ALU_result <= (ALUinput1 + ALUinput2);
            Zero_Flag <= 0;
        end
        'h2: begin
            ALU_result <= (ALUinput1 - ALUinput2);
            Zero_Flag <= 0;
        end
        'h3: begin
            ALU_result <= (ALUinput1 ^ ALUinput2);
            Zero_Flag <= 0;
        end
        'h4: begin
            ALU_result <= (ALUinput1 | ALUinput2);
            Zero_Flag <= 0;
        end
        'h5: begin
            ALU_result <= (ALUinput1 & ALUinput2);
            Zero_Flag <= 0;
        end
        'h6: begin
            ALU_result <= (ALUinput1 << ALUinput2);
            Zero_Flag <= 0;
        end
        'h7: begin
            ALU_result <= $signed(ALUinput1 >>> ALUinput2);
            Zero_Flag <= 0;
        end
        'h8: begin
            ALU_result <= $signed(($signed(ALUinput1 >>> ALUinput2) | $signed(ALUinput1 >>> (32 - ALUinput2))));
            Zero_Flag <= 0;
        end
        'h9: begin
            if ((ALUinput1 < ALUinput2)) begin
                ALU_result <= 1;
                Zero_Flag <= 0;
            end
            else begin
                ALU_result <= 0;
                Zero_Flag <= 0;
            end
        end
        'ha: begin
            if ((ALUinput1 == ALUinput2)) begin
                Zero_Flag <= 1;
                ALU_result <= 0;
            end
            else begin
                Zero_Flag <= 0;
                ALU_result <= 0;
            end
        end
        'hb: begin
            if ((ALUinput1 != ALUinput2)) begin
                Zero_Flag <= 1;
                ALU_result <= 0;
            end
            else begin
                Zero_Flag <= 0;
                ALU_result <= 0;
            end
        end
        'hc: begin
            if ((ALUinput1 < ALUinput2)) begin
                Zero_Flag <= 1;
                ALU_result <= 0;
            end
            else begin
                Zero_Flag <= 0;
                ALU_result <= 0;
            end
        end
        'hd: begin
            if ((ALUinput1 >= ALUinput2)) begin
                Zero_Flag <= 1;
                ALU_result <= 0;
            end
            else begin
                Zero_Flag <= 0;
                ALU_result <= 0;
            end
        end
        'he: begin
            ALU_result <= (ALUinput1 + 4);
            Zero_Flag <= 1;
        end
        'hf: begin
            ALU_result <= (ALUinput2 << 12);
            Zero_Flag <= 0;
        end
        'h10: begin
            ALU_result <= (ALUinput1 + (ALUinput2 << 12));
            Zero_Flag <= 0;
        end
        default: begin
            Zero_Flag <= 0;
            ALU_result <= 0;
        end
    endcase
end


always @(ALU_result, rs2_Out) begin: CPU_DATAMEMORY0_ACCESS
    if ((memRead == 1)) begin
        if (memWrite) begin
            DataMemory0_memory[ALU_result] <= rs2_Out[8-1:0];
            dataMem <= 0;
        end
        else begin
            dataMem[8-1:0] <= DataMemory0_memory[ALU_result];
        end
    end
    if ((memRead == 2)) begin
        if (memWrite) begin
            DataMemory0_memory[(ALU_result + 1)] <= rs2_Out[16-1:8];
            DataMemory0_memory[ALU_result] <= rs2_Out[8-1:0];
            dataMem <= 0;
        end
        else begin
            dataMem[16-1:8] <= DataMemory0_memory[(ALU_result + 1)];
            dataMem[8-1:0] <= DataMemory0_memory[ALU_result];
        end
    end
    if ((memRead == 3)) begin
        if (memWrite) begin
            DataMemory0_memory[(ALU_result + 3)] <= rs2_Out[32-1:24];
            DataMemory0_memory[(ALU_result + 2)] <= rs2_Out[24-1:16];
            DataMemory0_memory[(ALU_result + 1)] <= rs2_Out[16-1:8];
            DataMemory0_memory[ALU_result] <= rs2_Out[8-1:0];
            dataMem <= 0;
        end
        else begin
            dataMem[32-1:24] <= DataMemory0_memory[(ALU_result + 3)];
            dataMem[24-1:16] <= DataMemory0_memory[(ALU_result + 2)];
            dataMem[16-1:8] <= DataMemory0_memory[(ALU_result + 1)];
            dataMem[8-1:0] <= DataMemory0_memory[ALU_result];
        end
    end
    else begin
        dataMem <= 0;
    end
end


always @(currentAddress, imm) begin: CPU_BRANCHADDER0_ADDER
    jumpInstruction <= ($signed({1'b0, currentAddress}) + (imm << 1));
end


always @(nextInstruction, jumpInstruction, Selector_Branch) begin: CPU_MUX2_10_COMB
    if ((Selector_Branch == 0)) begin
        nextPCInput <= nextInstruction;
    end
    else begin
        nextPCInput <= jumpInstruction;
    end
end


always @(rs1_Out, address, pcToALU) begin: CPU_MUX2_11_COMB
    if ((pcToALU == 0)) begin
        ALUinput1 <= rs1_Out;
    end
    else begin
        ALUinput1 <= address;
    end
end


always @(rs2_Out, imm, immToALU) begin: CPU_MUX2_12_COMB
    if ((immToALU == 0)) begin
        ALUinput2 <= rs2_Out;
    end
    else begin
        ALUinput2 <= imm;
    end
end


always @(ALU_result, dataMem, memToReg) begin: CPU_MUX2_13_COMB
    if ((memToReg == 0)) begin
        data <= ALU_result;
    end
    else begin
        data <= dataMem;
    end
end


always @(address, rs1_Out, reg1ToPC) begin: CPU_MUX2_14_COMB
    if ((reg1ToPC == 0)) begin
        currentAddress <= address;
    end
    else begin
        currentAddress <= rs1_Out;
    end
end


always @(nextPCInput, resetPC, enableReset) begin: CPU_MUX2_15_COMB
    if ((enableReset == 0)) begin
        pcInput <= nextPCInput;
    end
    else begin
        pcInput <= resetPC;
    end
end


always @(posedge clock) begin: CPU_PROGRAM_COUNTER
    if (reset) begin
        resetPC <= 0;
        enableReset <= 1;
        reset <= 0;
    end
    else begin
        enableReset <= 0;
        address <= pcInput;
    end
end


always @(branch, Zero_Flag) begin: CPU_SELECTORBRANCH
    Selector_Branch <= (branch && Zero_Flag);
end

endmodule
